// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace WebApiCT.Migrations
{
    [DbContext(typeof(RepositoryDbContext))]
    partial class RepositoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f336980a-c880-43d8-bd25-3576bcdec1f0"),
                            Finish = new DateTime(2021, 4, 13, 8, 50, 0, 0, DateTimeKind.Unspecified),
                            Name = "Утреняя тренировка",
                            Start = new DateTime(2021, 4, 13, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Entities.Models.ActivityExercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("ActivityExercise");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eac5d895-df3d-41aa-abcc-2915be0bb837"),
                            ActivityId = new Guid("f336980a-c880-43d8-bd25-3576bcdec1f0"),
                            ExerciseId = new Guid("291bf3d3-9c56-4f6c-b78e-9b100a2e7b55")
                        },
                        new
                        {
                            Id = new Guid("398f8ada-bf2a-491e-bce9-9cca15f45120"),
                            ActivityId = new Guid("f336980a-c880-43d8-bd25-3576bcdec1f0"),
                            ExerciseId = new Guid("7c2a51b6-ffd3-4f82-8e21-92ca4053a37e")
                        });
                });

            modelBuilder.Entity("Entities.Models.ActivityUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("ActivityUserProfile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d3f8f77c-089e-425e-b79e-eb329456463c"),
                            ActivityId = new Guid("f336980a-c880-43d8-bd25-3576bcdec1f0"),
                            UserProfileId = new Guid("647a9334-4fd6-4700-ba4b-5622039ab32e")
                        });
                });

            modelBuilder.Entity("Entities.Models.Eating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Moment")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Eatings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a91cf0c-7b9a-43ea-b87e-95e1dd30354e"),
                            Moment = new DateTime(2021, 4, 13, 8, 55, 0, 0, DateTimeKind.Unspecified),
                            Name = "Завтрак"
                        },
                        new
                        {
                            Id = new Guid("608ccd48-9de9-4b47-8e6c-5ee094485be8"),
                            Moment = new DateTime(2021, 4, 13, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Обед"
                        });
                });

            modelBuilder.Entity("Entities.Models.EatingUserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EatingId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("EatingUserProfile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b3039d0-7372-47d8-bff2-5205bf580c39"),
                            EatingId = new Guid("9a91cf0c-7b9a-43ea-b87e-95e1dd30354e"),
                            UserProfileId = new Guid("647a9334-4fd6-4700-ba4b-5622039ab32e")
                        },
                        new
                        {
                            Id = new Guid("10ec2edc-e38c-40b1-a83f-216c1992a457"),
                            EatingId = new Guid("608ccd48-9de9-4b47-8e6c-5ee094485be8"),
                            UserProfileId = new Guid("647a9334-4fd6-4700-ba4b-5622039ab32e")
                        });
                });

            modelBuilder.Entity("Entities.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CaloriesPerMinute")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfRepetitions")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfSets")
                        .HasColumnType("int");

                    b.Property<int>("RestBetweenSets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c2a51b6-ffd3-4f82-8e21-92ca4053a37e"),
                            CaloriesPerMinute = 5.0,
                            Description = "Выполняются на перекладине. Длительность 40 секунд",
                            Name = "Подтягивания",
                            NumberOfRepetitions = 10,
                            NumberOfSets = 4,
                            RestBetweenSets = 20
                        },
                        new
                        {
                            Id = new Guid("291bf3d3-9c56-4f6c-b78e-9b100a2e7b55"),
                            CaloriesPerMinute = 10.0,
                            Description = "Из положения стоя, ноги на ширине плеч",
                            Name = "Приседания",
                            NumberOfRepetitions = 20,
                            NumberOfSets = 3,
                            RestBetweenSets = 60
                        });
                });

            modelBuilder.Entity("Entities.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Calories")
                        .HasColumnType("float");

                    b.Property<double>("Carbohydrates")
                        .HasColumnType("float");

                    b.Property<double>("Fats")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Proteins")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Calories = 77.0,
                            Carbohydrates = 16.300000000000001,
                            Fats = 0.40000000000000002,
                            Name = "Картошка",
                            Proteins = 2.0
                        },
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Calories = 98.0,
                            Carbohydrates = 20.0,
                            Fats = 0.40000000000000002,
                            Name = "Макароны",
                            Proteins = 3.6000000000000001
                        },
                        new
                        {
                            Id = new Guid("a1d8448e-b995-4783-b9d3-987c857c8c5d"),
                            Calories = 113.0,
                            Carbohydrates = 0.40000000000000002,
                            Fats = 1.8999999999999999,
                            Name = "Куриная грудка",
                            Proteins = 23.600000000000001
                        });
                });

            modelBuilder.Entity("Entities.Models.IngredientEating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Grams")
                        .HasColumnType("float");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EatingId");

                    b.HasIndex("IngredientId");

                    b.ToTable("IngredientEating");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e687ead-a71c-4ea3-9bd4-d8596e6a5339"),
                            EatingId = new Guid("9a91cf0c-7b9a-43ea-b87e-95e1dd30354e"),
                            Grams = 300.0,
                            IngredientId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870")
                        },
                        new
                        {
                            Id = new Guid("5ef0d854-3d0f-4b99-bff0-4545a236236a"),
                            EatingId = new Guid("608ccd48-9de9-4b47-8e6c-5ee094485be8"),
                            Grams = 200.0,
                            IngredientId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3")
                        },
                        new
                        {
                            Id = new Guid("f71f6aa0-a6a3-49d7-8cb9-a7e0b7c261b9"),
                            EatingId = new Guid("608ccd48-9de9-4b47-8e6c-5ee094485be8"),
                            Grams = 100.0,
                            IngredientId = new Guid("a1d8448e-b995-4783-b9d3-987c857c8c5d")
                        });
                });

            modelBuilder.Entity("Entities.Models.IngredientRecipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Grams")
                        .HasColumnType("float");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("IngredientRecipe");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fc02eb0-b6dd-46e7-aefc-d71f14b5ecbd"),
                            Grams = 200.0,
                            IngredientId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            RecipeId = new Guid("000c0477-d0ec-472d-b65c-1b3561dac2a0")
                        },
                        new
                        {
                            Id = new Guid("2fc02eb0-b6dd-46e7-aefc-d71f14b5ecdb"),
                            Grams = 100.0,
                            IngredientId = new Guid("a1d8448e-b995-4783-b9d3-987c857c8c5d"),
                            RecipeId = new Guid("000c0477-d0ec-472d-b65c-1b3561dac2a0")
                        });
                });

            modelBuilder.Entity("Entities.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Recipes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("000c0477-d0ec-472d-b65c-1b3561dac2a0"),
                            Description = "Также просто, как и макароны, но необычно",
                            Name = "Картошка с курицей",
                            UserProfileId = new Guid("647a9334-4fd6-4700-ba4b-5622039ab32e")
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.Models.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("647a9334-4fd6-4700-ba4b-5622039ab32e"),
                            DateOfBirth = new DateTime(2002, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 175,
                            Login = "vlyashko02",
                            Weight = 84.200000000000003
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0878c5ec-d7f6-407d-b5a4-81a8c7a97c38",
                            ConcurrencyStamp = "b72724b7-55f0-45fd-9edd-bf932eae8131",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "c1fcb727-fc82-4920-9cb5-cc4fd5e93d6a",
                            ConcurrencyStamp = "193af257-5a27-4a5b-a97d-e7a786b5c397",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "a3a24f45-aa3d-47ef-92cc-065b120c1737",
                            ConcurrencyStamp = "b690af6b-4af0-40b7-a6dd-944ec8c3d7be",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.ActivityExercise", b =>
                {
                    b.HasOne("Entities.Models.Activity", "Activity")
                        .WithMany("ActivityExercise")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Exercise", "Exercise")
                        .WithMany("ActivityExercise")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("Exercise");
                });

            modelBuilder.Entity("Entities.Models.ActivityUserProfile", b =>
                {
                    b.HasOne("Entities.Models.Activity", "Activity")
                        .WithMany("ActivityUserProfile")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UserProfile", "UserProfile")
                        .WithMany("ActivityUserProfile")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Entities.Models.EatingUserProfile", b =>
                {
                    b.HasOne("Entities.Models.Eating", "Eating")
                        .WithMany("EatingUserProfile")
                        .HasForeignKey("EatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.UserProfile", "UserProfile")
                        .WithMany("EatingUserProfile")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eating");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Entities.Models.IngredientEating", b =>
                {
                    b.HasOne("Entities.Models.Eating", "Eating")
                        .WithMany("IngredientEating")
                        .HasForeignKey("EatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientEating")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eating");

                    b.Navigation("Ingredient");
                });

            modelBuilder.Entity("Entities.Models.IngredientRecipe", b =>
                {
                    b.HasOne("Entities.Models.Ingredient", "Ingredient")
                        .WithMany("IngredientRecipe")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Recipe", "Recipe")
                        .WithMany("IngredientRecipe")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Entities.Models.Recipe", b =>
                {
                    b.HasOne("Entities.Models.UserProfile", "UserProfile")
                        .WithMany("Recipes")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Activity", b =>
                {
                    b.Navigation("ActivityExercise");

                    b.Navigation("ActivityUserProfile");
                });

            modelBuilder.Entity("Entities.Models.Eating", b =>
                {
                    b.Navigation("EatingUserProfile");

                    b.Navigation("IngredientEating");
                });

            modelBuilder.Entity("Entities.Models.Exercise", b =>
                {
                    b.Navigation("ActivityExercise");
                });

            modelBuilder.Entity("Entities.Models.Ingredient", b =>
                {
                    b.Navigation("IngredientEating");

                    b.Navigation("IngredientRecipe");
                });

            modelBuilder.Entity("Entities.Models.Recipe", b =>
                {
                    b.Navigation("IngredientRecipe");
                });

            modelBuilder.Entity("Entities.Models.UserProfile", b =>
                {
                    b.Navigation("ActivityUserProfile");

                    b.Navigation("EatingUserProfile");

                    b.Navigation("Recipes");
                });
#pragma warning restore 612, 618
        }
    }
}
